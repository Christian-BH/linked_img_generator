import logging
from typing import Dict

from openai import AzureOpenAI


class UtilizeOpenAI:
    """
    Class to utilize OpenAI API for generating summaries of LinkedIn profiles based on instructions provided

    Args:
        instructions_toml (Dict): (Nested) Dictionary of instructions for the OpenAI API. Must have keys:
            open_ai_api, open_ai_settings, prompts. Each key contains a dictionary of settings the corresponding
            part of the OpenAI API.
        api_key (str): API key for the OpenAI API.
    """

    def __init__(self, instructions_toml: Dict, api_key: str):
        self.api_key = api_key
        # Extract the necessary information from the instructions file and save as class variables for easy reference
        self.open_ai_api = instructions_toml.get("open_ai_api")
        self.open_ai_settings = instructions_toml.get("open_ai_settings")
        self.instructions = instructions_toml.get("prompts")

    def _init_openai(self):
        """Initialize OpenAI client"""
        client = AzureOpenAI(
            api_key=self.api_key,
            **self.open_ai_api,  # Dictionary of endpoint settings
        )
        return client

    def _assemble_prompt(self, content: str):
        """
        Assemble the prompt for the OpenAI API

        Args:
            content (str): The person profile to generate a response for

        Returns:
            prompt (str): Prompt for the OpenAI gpt model
        """

        for key in ["role", "instructions"]:  # Must have keys
            if self.instructions.get(key) is None:
                self.instructions[key] = ""
                logging.warning(
                    f"{key} in instructions returns None, replacing with empty string"
                )
        prompt = [
            {"role": "system", "content": self.instructions.get("role")},
            {"role": "user", "content": f">>>>>\n{content}\n<<<<<"},
            {"role": "user", "content": self.instructions.get("instructions")},
        ]
        return prompt

    def generate(self, content: str):
        """
        Generate a response from OpenAI based on the content provided

        Args:
            content (str): Dictionary of the person profile to generate a response for

        Returns:
            response (str): The response generated by OpenAI
        """
        client = self._init_openai()

        prompt = self._assemble_prompt(content=content)

        response = client.chat.completions.create(
            model=self.open_ai_settings.get("model"),
            temperature=self.open_ai_settings.get("temperature"),
            messages=prompt,
        )

        return response.choices[0].message.content
